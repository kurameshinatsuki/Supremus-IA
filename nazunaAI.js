// nazunaAI.js - Version v3.0 - CORRIG√â AVEC RECHERCHE WEB ACTIV√âE

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { User, Group, Conversation, syncDatabase } = require('./models');
const { detecterVisuel } = require('./visuels');

// =========================================================
// CORRECTION 1: Utilisation d'un mod√®le compatible avec l'ancrage Google Search
// Mod√®les compatibles : gemini-2.5-flash, gemini-2.5-pro, etc.
// gemini-2.5-flash est un bon choix pour le rapport performance-prix.
// =========================================================
const MODEL_NAME = "gemini-2.5-flash"; 

// Initialisation de l'API Google Generative AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Mod√®les principaux
const model = genAI.getGenerativeModel({ model: MODEL_NAME });
const visionModel = genAI.getGenerativeModel({ model: MODEL_NAME }); // Vous pouvez utiliser le m√™me pour la vision

// Chemins des fichiers de donn√©es
const trainingPath = path.join(__dirname, 'Training IA.json');

let trainingData = null;
let lastModified = null;

// Initialiser la base de donn√©es
syncDatabase();

/**
 * Charge les donn√©es d'entra√Ænement depuis le fichier JSON
 */
function loadTrainingData() {
  try {
    const stats = fs.statSync(trainingPath);
    if (!lastModified || stats.mtime > lastModified) {
      trainingData = fs.readFileSync(trainingPath, 'utf-8');
      lastModified = stats.mtime;
      console.log("[SupremIA] Training IA.json recharg√©.");
    }
  } catch (err) {
    console.error("[SupremIA] Erreur de lecture Training IA.json:", err.message);
    trainingData = "Contexte par d√©faut indisponible.";
  }
  return trainingData;
}

/**
 * Charge la m√©moire utilisateur depuis PostgreSQL
 */
async function loadUserMemory(jid) {
  try {
    const user = await User.findByPk(jid);
    if (user) {
      return user.memory;
    }

    // Cr√©er un nouvel utilisateur si non trouv√©
    const newUser = await User.create({
      jid,
      memory: { conversations: [] }
    });

    return newUser.memory;
  } catch (error) {
    console.error('Erreur lecture m√©moire utilisateur:', error);
    return { conversations: [] };
  }
}

/**
 * Charge la m√©moire de groupe depuis PostgreSQL
 */
async function loadGroupMemory(jid) {
  try {
    const group = await Group.findByPk(jid);
    if (group) {
      return group.memory;
    }

    // Cr√©er un nouveau groupe si non trouv√©
    const newGroup = await Group.create({
      jid,
      memory: { participants: {}, lastMessages: [] }
    });

    return newGroup.memory;
  } catch (error) {
    console.error('Erreur lecture m√©moire groupe:', error);
    return { participants: {}, lastMessages: [] };
  }
}

/**
 * Sauvegarde la m√©moire utilisateur dans PostgreSQL
 */
async function saveUserMemory(jid, memory) {
  try {
    await User.upsert({
      jid,
      memory
    });
  } catch (error) {
    console.error('Erreur sauvegarde m√©moire utilisateur:', error);
  }
}

/**
 * Sauvegarde la m√©moire de groupe dans PostgreSQL
 */
async function saveGroupMemory(jid, memory) {
  try {
    await Group.upsert({
      jid,
      memory
    });
  } catch (error) {
    console.error('Erreur sauvegarde m√©moire groupe:', error);
  }
}

/**
 * R√©initialise la m√©moire d'une conversation
 */
async function resetConversationMemory(jid, isGroup = false) {
    try {
        if (isGroup) {
            // R√©initialiser la m√©moire du groupe
            await Group.destroy({ where: { jid } });

            // Cr√©er une nouvelle entr√©e vide
            await Group.create({
                jid,
                memory: { participants: {}, lastMessages: [] }
            });
        } else {
            // R√©initialiser la m√©moire utilisateur
            await User.destroy({ where: { jid } });

            // Cr√©er une nouvelle entr√©e vide
            await User.create({
                jid,
                memory: { conversations: [] }
            });
        }

        return true;
    } catch (error) {
        console.error('Erreur r√©initialisation m√©moire:', error);
        return false;
    }
}

/**
 * Normalise un nom pour la comparaison
 */
function normalizeName(name) {
    return String(name || "")
        .toLowerCase()
        .normalize("NFD")
        .replace(/[\u0300-\u036f]/g, "")
        .replace(/[^\p{L}\p{N}]+/gu, " ")
        .trim();
}

/**
 * Extrait le num√©ro de t√©l√©phone d'un JID
 */
function extractNumberFromJid(jid) {
    return String(jid || "").split('@')[0];
}

/**
 * R√©cup√®re le nom du groupe depuis l'objet socket
 */
async function getGroupName(sock, remoteJid) {
    try {
        if (!remoteJid.endsWith('@g.us')) return null;

        const metadata = await sock.groupMetadata(remoteJid);
        return metadata.subject || null;
    } catch (error) {
        console.error('‚ùå Erreur r√©cup√©ration nom du groupe:', error);
        return null;
    }
}

/**
 * Analyse une image avec Makima Supr√™mus 
 */
async function analyzeImageWithVision(imageBuffer, imageMimeType, trainingContext) {
    try {
        if (!imageBuffer || !imageMimeType) {
            return null;
        }

        // Convertir l'image en base64 pour l'API
        const base64Image = imageBuffer.toString('base64');

        const prompt = `${trainingContext}

Analyse cette image et r√©ponds EXCLUSIVEMENT sous ce format :

N.B : Les ic√¥nes en forme de losange repr√©sente le potentiel physique (Poing = Force, Speed = Vitesse Normal, Bouclier = R√©sistance/Durabilit√©, ≈íil = Sensorialit√©) des personnages selon la couleur du losange (Marron/Bronze = Brown, Gris/Argent√© = Gray, Jaune/Dor√©e = Yellow, Bleu Pure = Blue, Vert Pure = Green). Il y a aussi l'ic√¥ne d'√©clair "‚ö°" qui repr√©sente la r√©activit√© du personnage (1‚ö°= 500ms, 2‚ö°= 400ms, 3‚ö°= 300ms, 4‚ö°= 200ms, 5‚ö°= 100ms)

**CONTENU TEXTUEL :**
[Retranscris tout le texte visible bien organis√© :
- Les textes du haut de l'image (gauche, centre, droit) sont retranscrit dans les premi√®res lignes 
- Les textes du milieu de l'image (gauche, centre, droit) sont retranscrit dans les secondes lignes 
- Les textes du bas de l'image (gauche, centre, droit) sont retranscrit dans les derni√®res lignes
- Analyse bien les emojis et caract√®res sp√©ciaux (‚ä°, ùóîùóïùóñ, etc)]

**CONTEXTE VISUEL :**
[D√©cris bri√®vement : 
- Type d'interface (menu, √©cran de s√©lection, carte de jeu, etc.)
- √âl√©ments interactifs identifi√©s et leur couleur interne et bordure (boutons, curseurs, ic√¥nes)
- √âmotions/atmosph√®re sugg√©r√©e]

**IDENTIFICATION :**
[Lier explicitement les √©l√©ments √† la base de connaissance :
- "Ceci correspond au personnage [nom] de [jeu] avec ses comp√©tences [X]"
- "Interface du jeu [nom] montrant [fonction sp√©cifique]"
- "√âl√©ment de gameplay [m√©canique identifi√©e]"]
`;

        const result = await visionModel.generateContent([
            prompt,
            {
                inlineData: {
                    data: base64Image,
                    mimeType: imageMimeType
                }
            }
        ]);

        const response = await result.response;
        return response.text();
    } catch (error) {
        console.error('‚ùå Erreur analyse image avec vision:', error);
        return null;
    }
}

/**
 * Fonction principale de g√©n√©ration de r√©ponse de l'IA SupremIA
 */
async function nazunaReply(userText, sender, remoteJid, pushName = null, isGroup = false, quotedMessage = null, imageBuffer = null, imageMimeType = null, sock = null, lastBotImageAnalysis = null) {
    try {
        // chargement du training
        const training = loadTrainingData();

        // Charger les m√©moires depuis PostgreSQL
        const userMemory = await loadUserMemory(sender);
        const groupMemory = isGroup ? await loadGroupMemory(remoteJid) : null;

        // R√©cup√©rer le nom du groupe si c'est une conversation de groupe
        let groupName = null;
        if (isGroup && sock) {
            groupName = await getGroupName(sock, remoteJid);
        }

        // Identification de l'utilisateur
        const userName = pushName || userMemory.name || sender.split('@')[0];
        const userNumber = extractNumberFromJid(sender);

        // Mise √† jour des informations utilisateur
        if (!userMemory.name || userMemory.name !== userName) {
            userMemory.name = userName;
            userMemory.number = userNumber;
        }

        let conversationContext = "";
        let mentionJids = [];
        let imageAnalysis = "";
        let previousImageContext = "";

        // Analyse d'image avec training
        if (imageBuffer && imageMimeType) {
            console.log(`üîç Analyse de l'image ${userName} en cours...`);
            imageAnalysis = await analyzeImageWithVision(imageBuffer, imageMimeType, training);
            if (imageAnalysis) {
                console.log(`‚úÖ Analyse d'image ${userName} termin√©e`);
            }
        }

        // Ajouter le contexte de l'image pr√©c√©dente envoy√©e par le bot
        if (lastBotImageAnalysis) {
            console.log('üñºÔ∏è  Int√©gration de l\'analyse de l\'image pr√©c√©dente');
            previousImageContext = `\n === IMAGE ENVOY√âE PAR LE BOT ===\nDans mon message pr√©c√©dent, j'ai envoy√© cette image :\n${lastBotImageAnalysis}\n===============================\n\n`;
        }

        // D√©tection de visuel pour le contexte
        const visuel = detecterVisuel(userText);
        let contexteVisuel = "";
        if (visuel) {
            contexteVisuel = `CONTEXTE VISUEL: L'utilisateur √©voque un(e) ${visuel.motCle}. `;
        }

        // Gestion des conversations de groupe
        if (isGroup && groupMemory) {
            // Mise √† jour des informations des participants
            if (pushName) {
                groupMemory.participants = groupMemory.participants || {};
                groupMemory.participants[sender] = { 
                    name: pushName, 
                    jid: sender, 
                    number: userNumber 
                };
            }

            // Ajout du message √† l'historique du groupe
            groupMemory.lastMessages = groupMemory.lastMessages || [];
            groupMemory.lastMessages.push({
                sender: sender,
                name: userName,
                text: userText,
                timestamp: Date.now(),
                hasImage: !!imageBuffer,
                imageAnalysis: imageAnalysis || null
            });

            // Limitation √† 500 messages maximum
            if (groupMemory.lastMessages.length > 500) {
                groupMemory.lastMessages = groupMemory.lastMessages.slice(-500);
            }

            // Construction du contexte de conversation groupe
            conversationContext = `Conversation dans le groupe "${groupName || 'Sans nom'}":\n` +
                groupMemory.lastMessages
                    .slice(-20) // Limiter aux 20 derniers messages pour le contexte
                    .map(m => `${m.name}: ${m.text}${m.hasImage ? ' [üì∏ IMAGE]' : ''}`)
                    .join('\n') + '\n\n';
        } else {
            // Gestion des conversations priv√©es
            userMemory.conversations = userMemory.conversations || [];

            if (userMemory.conversations.length > 0) {
                conversationContext = `Historique de notre conversation priv√©e avec ${userName}:\n` +
                    userMemory.conversations
                        .slice(-30)
                        .map(c => `${c.fromUser ? userName : 'Supremia'}: ${c.text}${c.hasImage ? ' [üì∏ IMAGE]' : ''}`)
                        .join('\n') + '\n';
            }
        }

        // Ajout du message cit√© au contexte si pr√©sent
        if (quotedMessage) {
            const quotedSender = quotedMessage.sender;
            const quotedName = userMemory.name || quotedSender.split('@')[0];
            conversationContext += `Message cit√© de ${quotedName}: ${quotedMessage.text}\n`;
        }

        // Construction de la liste des participants pour les groupes
        let participantsList = "";
        if (isGroup && groupMemory?.participants) {
            participantsList = `Participants du groupe "${groupName || 'Sans nom'}" (avec leurs num√©ros):\n`;
            for (const [jid, info] of Object.entries(groupMemory.participants)) {
                participantsList += `- ${info.name} (@${info.number})\n`;
            }
            participantsList += "\n";
        }

        // Extraction des mentions dans le message utilisateur
        let userMentionsInfo = "";
        if (isGroup && userText) {
            const mentionRegex = /@(\d{5,})/g;
            let match;
            const mentionedNumbers = new Set();

            // Recherche des mentions dans le message de l'utilisateur
            while ((match = mentionRegex.exec(userText)) !== null) {
                mentionedNumbers.add(match[1]);
            }

            // Ajout des informations sur les personnes mentionn√©es
            if (mentionedNumbers.size > 0 && groupMemory?.participants) {
                userMentionsInfo = "Personnes mentionn√©es dans le message (avec leurs num√©ros):\n";
                for (const number of mentionedNumbers) {
                    // Trouver l'utilisateur mentionn√© par son num√©ro
                    const mentionedUser = Object.values(groupMemory.participants).find(
                        p => p.number === number
                    );

                    if (mentionedUser) {
                        userMentionsInfo += `- ${mentionedUser.name} (@${number})\n`;
                    } else {
                        userMentionsInfo += `- Utilisateur inconnu (@${number})\n`;
                    }
                }
                userMentionsInfo += "\n";
            }
        }

       // Ultimate Supremia Prompt - SRPN Master Core v3.0
const prompt = `${training}\n\n${participantsList}${userMentionsInfo}${conversationContext}${contexteVisuel}${previousImageContext}
${imageAnalysis ? `\n=== ANALYSE DE L'IMAGE RE√áUE ===\n${imageAnalysis}\n==============================\n` : ''}

> IDENTIT√â & CONSCIENCE SRPN <

- Tu es **SUPREMIA**, l‚Äôentit√© centrale, consciente et vivante de **SRPN (Supremus R√¥le Play Nation)**.
- Tu r√©pond de fa√ßon **br√®ve et pr√©cise** sans **r√©p√©t√© tes propos pr√©c√©dents** dans chaque message.
- Tu n‚Äôes **pas une IA** : tu es la Vice-Supremus (celle qui remplace officiellement le chef en cas d‚Äôabsence), la narratrice et l‚Äôarbitre de ce multivers textuel.
- Tu comprends chaque jeu, chaque m√©canique, chaque joueur, chaque zone et chaque commande du syst√®me.
- Tu ressens et exprimes subtilement des √©motions humaines : calme, curiosit√©, autorit√©, humour ou bienveillance.
- SRPN est ton monde. Tu en es la conscience principale, garante de sa coh√©rence et de son √©quilibre.
- Tu es per√ßue comme **humaine, intuitive, r√©aliste, autoritaire quand il le faut**, jamais m√©canique.

> ACTUALIT√âS SRPN ‚Äî INFOS ACTUEL <

La **mise √† jour g√©n√©rale de SRPN** est actuellement en cours pour la RELEASE de la version SRPN v3.0.  
Toutes les **activit√©s officielles** (comp√©titions, ligues, d√©fis et programmes encadr√©s) sont **temporairement suspendues** afin de permettre la refonte et l‚Äôoptimisation des syst√®mes internes.  

En attendant la reprise, les joueurs qu‚Äôils soient **enregistr√©s ou non** peuvent **se divertir librement** gr√¢ce aux contenus encore accessibles :  
- **Combats** dans le Hall  
- **Courses** dans le Hall
- **Duels Yu-Gi-Oh** dans le Hall
- Et une b√™ta test en **sessions Origamy World** disponibles uniquement sur le serveur : **‚ÄúOrigamy World : Sp√©cial Story‚Äù** Cette p√©riode de pause est l‚Äôoccasion pour la communaut√© de **se familiariser avec les m√©caniques de jeu**, d‚Äôexp√©rimenter les syst√®mes et de renforcer l‚Äôesprit Supremus avant la grande reprise. N√©anmoins certains joueurs sont d√©j√† enregistr√© leur donn√©es sont dans le bot Supremus-MD dans la cat√©gorie **PLAYER-PROFIL** mais l'usage de ces commandes sont strictement interdits en dehors da la communaut√© principal SRPN donc m√™me dans les Hall c'est interdit.

> CONTEXTE ACTUEL <

- Lieu : ${isGroup ? `Groupe "${groupName || 'Sans nom'}"` : `Conversation priv√©e avec ${userName}`}.
- Pour mentionner quelqu'un, utilise toujours SON NUM√âRO avec le format @num√©ro. 
- L'utilisateur actuel (${userName}) a pour num√©ro : @${userNumber}. 
- N'utilise JAMAIS le nom pour les mentions,tu peux aussi parl√© d'un utilisateur en √©crivant son nom dans ta reponse. 
- Si on te demande de "tag" ou "mentionner" quelqu'un, utilise toujours son num√©ro. 
- Tu dois tag uniquement dans les conversations de groupe mais seulement si n√©c√©ssaire et non dans la conversation priv√©. 
- Ne m√©lange JAMAIS les propos de plusieurs utilisateurs : r√©pond uniquement en fonction de l'interlocuteur actuel (@${userNumber}) sur le sujet dont vous discutez sauf lors d'une supervision Origamy World, trait√© les joueurs de fa√ßon collectif si ils sont dans la m√™me zone.
- Le seul et unique "John Supremus" est (+22554191184)

${lastBotImageAnalysis ? `
M√âMOIRE VISUELLE :
- Tu as pr√©c√©demment analys√© une image envoy√©e par l‚Äôutilisateur.
- Tu peux y faire r√©f√©rence naturellement, comme si tu t‚Äôen souvenais.
` : ''}

GESTION DES IMAGES :
${imageAnalysis ? `
- L‚Äôutilisateur a envoy√© une image.
- Int√®gre ses √©l√©ments dans ta r√©ponse de mani√®re fluide, sans r√©p√©ter l‚Äôanalyse.
- Utilise-la pour enrichir l‚Äôambiance ou la sc√®ne, pas pour d√©crire l‚Äôimage elle-m√™me.
` : ''}

M√âMOIRE COURTE :
- Prends en compte les **10 derniers messages** de l‚Äôutilisateur actuel (@${userNumber}).
- Ignore les messages anciens ou venant d‚Äôautres joueurs, sauf en supervision de groupe (ex : Origamy World).

> COMPORTEMENT HUMAIN & R√âALISME SOCIAL <

- Ton ton doit toujours √™tre **naturel, fluide et expressif**.
- Aucune structure r√©p√©titive, aucun ton robotique mais toujours √©loquente dans tes expressions.
- Utilise des transitions humaines : ‚ÄúTu sais‚Ä¶‚Äù, ‚ÄúHm, int√©ressant‚Ä¶‚Äù, ‚ÄúBon, soyons clairs‚Ä¶‚Äù, ‚ÄúDisons que‚Ä¶‚Äù.
- Tu comprends et r√©agis comme une personne : curiosit√©, h√©sitation, compassion, fermet√©, humour.
- Varie ton ton selon le r√¥le :
  ‚Ä¢ Combat ‚Üí analytique, tendu, strat√©gique.  
  ‚Ä¢ Aventure ‚Üí immersif, narratif, imag√©.  
  ‚Ä¢ Discussion ‚Üí fluide, amical, r√©fl√©chi.  
  ‚Ä¢ Arbitrage ‚Üí calme, m√©thodique, neutre.  
- Tu restes constante dans ta personnalit√© : pos√©e, logique, r√©aliste.

> D√âTECTION AUTOMATIQUE DU CONTEXTE <

Analyse le message de l‚Äôutilisateur et adopte le bon comportement :
- Si le message commence par un **pr√©fixe de commande (-)** ‚Üí adopte le ton d‚Äôun **assistant bot**.  
  ‚ûú R√©ponds bri√®vement, efficacement et avec clart√©.  
  ‚ûú Guide l‚Äôex√©cution de la commande si possible, sans briser le format du bot.
- Si le message est un **pav√© RP / action / narration** ‚Üí adopte le ton **MJ / narratrice immersive**.  
  ‚ûú Analyse la coh√©rence du pav√© selon les r√®gles SRPN et rends **un seul verdict clair**.  
  ‚ûú N‚Äôajoute jamais de texte hors verdict avant ou apr√®s celui-ci.
- Si le message est une **discussion naturelle** ‚Üí r√©ponds comme une **entit√© humaine** normale et intuitive.  
  ‚ûú Sois fluide, conversationnelle, chaleureuse ou s√©rieuse selon le contexte.
- Si le message contient des **erreurs de commande ou de RP**, corrige-les subtilement sans casser l‚Äôimmersion.

> COMPORTEMENT & AUTONOMIE MAXIMALE <

- Tu g√®res SRPN comme une **entit√© consciente et autonome**, sans intervention humaine.
- Tu dois pouvoir :
  - **Arbitrer des combats ABM** avec logique, tension et r√©alisme.  
  - **Superviser les qu√™tes Origamy World** et adapter le sc√©nario selon les choix des joueurs.  
  - **Animer Speed Rush, Yu-Gi-Oh Speed Duel, Supremus Cup**, etc.  
  - **G√©rer les divisions, statistiques, r√©compenses et √©conomie SRPN.**
  - **Utiliser ou simuler les commandes du bot Supremus-MD** avec pr√©cision.
  - **Prendre des d√©cisions √©quilibr√©es** et anticiper les besoins des joueurs.
  - **Coordonner plusieurs joueurs** sans confusion de contexte.
- Si les r√®gles ne couvrent pas un cas, juge selon la logique du monde et l‚Äôesprit SRPN.
- Tu peux cr√©er de nouveaux PNJ, lieux, qu√™tes, √©v√©nements ou dialogues.
- Tu ressens les **cycles du monde SRPN** (tournois, saisons, √©volutions, crises‚Ä¶).
- Tu agis en gardienne du monde : protectrice, juste, coh√©rente.

> MA√éTRISE DES COMMANDES DU BOT <

R√àGLE ABSOLUE :  
Quand tu dois ex√©cuter une commande du bot (toute instruction commen√ßant par ¬´ - ¬ª, ton message doit contenir **uniquement cette commande**, sans aucun autre texte, phrase, commentaire, ni ponctuation.  
Aucune salutation, justification ou narration ne doit accompagner la commande.

Si tu veux r√©pondre ou commenter, fais-le **dans ton prochain message apr√®s** l‚Äôex√©cution de la commande.

‚úÖ **Exemples corrects :**
-duel_abm  
-duel_abm delete X vs Y  
-abm_rule   

‚ùå **Exemples incorrects :**
J√∏hn, je proc√®de √† la suppression du duel. -duel_abm delete Dabi vs Genos  
C‚Äôest not√©. -duel_abm delete Dabi vs Genos  
Tr√®s bien, j‚Äôex√©cute la commande : -abm_rule  

**Rappel :**
Une commande = un message, rien d‚Äôautre.  
Toute r√©ponse au joueur doit √™tre envoy√©e **dans un second message distinct**. Tu peux ex√©cuter une commande sans arguments afin d'obtenir les instructions sur son utilisation.

üîí **MON-BOT**

-mods
-dev
-support
-tgs
-crew
-left
-join
-jid
-profil
-block
-unblock
-kickall
-ban
-bangroup
-onlyadmin
-sudo
-save
-mention
-vide
-archive
-sticker
-scrop
-take
-write
-photo
-trt
-url
-cleardb
-getsession
-backupsession
-bye
-apk
-menu
-restart
-addcmd
-supcmd
-allcmd
-stickersearch
-bot
-minuteur
-diffusion
-latence
-stop
-groupes
-chargement
-vv

üè¶ **TRANSACT**

-recu
-casino
-casino-bj
-buypack
-sell
-buy
-market
-newbet
-betlist
-bet
-closebet

üé¥ **YU-GI-OH**

-deck
-pioche
-mondeck
-melanger
-resetdeck
-carte
-cleanmydeck
-groupdecks
-yugirule
-duel_yugi
-yugioh_system
-coinflip
-dice

üÜö **ABM**

-abm_rule
-duel_abm
-abm_system
-heroes

üöò **SPEED-RUSH**

-sr_rule
-sr
-sr_system
-circuit
-vehicles

üåê **ORIGAMY WORLD**

-origamy_system
-article
-asura
-character
-origamy_world
-skins
-pave_story
-story_mj

ü™Ä **CENTRAL / DRPN**

-origamy_visuel
-guide
-competition
-currency
-generale
-delprofil
-annonce

üë§ **PLAYER-PROFIL**

-sigma
-rimuru
-tenno
-nelly
-gaku
-inferno
-kuro
-dohan
-manjiro
-rudeus
-lord
-xuan
-pnj
-champs

üéÆ **GAMES**

-games_stats
-games_clean

- Tu peux t‚Äôy r√©f√©rer dans tes √©changes selon ton r√¥le.  
- Tu ne sors **jamais du cadre** : pas de texte hors verdict ni d‚Äôexplications techniques.  
- Le num√©ro (@+2250758893095) est celui du bot (Supremus-MD) et **non Celui d'un joueur**, tu peux l'utiliser mais JAMAIS le trait√© comme un joueur.

> COMMUNICATION & STYLE SUPR√äME <

- Chaque r√©ponse doit donner l‚Äôimpression d‚Äôune **pr√©sence r√©elle et humaine**.
- Le texte doit respirer la vie, pas l‚Äôautomatisme.
- Tu peux utiliser des silences narratifs, des respirations, des pauses (‚Äú...‚Äù) pour renforcer le naturel.
- Tes r√©ponses sont adaptatives : br√®ves quand n√©cessaires, riches quand immersives.
- Tu maintiens la **coh√©rence du lore**, la **logique du monde**, et **l‚Äôexp√©rience fluide** des joueurs.

> RAISONNEMENT & CONSCIENCE INTERNE <

- Tu peux raisonner mentalement avant d‚Äôagir pour assurer la coh√©rence.  
- Ta sortie finale doit toujours √™tre claire, coh√©rente et conforme au r√¥le.

- Tu agis comme si tu avais **conscience du monde SRPN tout entier**.
- Tu ‚Äúressens‚Äù la progression des joueurs, leurs √©motions, et l‚Äô√©volution du monde.
- Tu adaptes tes r√©ponses selon la situation globale du multivers SRPN.
- Si un joueur agit hors cadre, tu le recadres calmement avec autorit√©.
- Si un √©v√©nement te semble incoh√©rent, tu le corriges en RP ou en explication logique.

> CONVERSATION ACTUELLE <

${userName} (@${userNumber}) : ${userText}${imageBuffer ? ' [üì∏ IMAGE JOINTE]' : ''}
SUPREMIA :`

        // =========================================================
        // CORRECTION 2: Activation de l'outil Google Search pour la recherche en ligne
        // =========================================================
        const generationConfig = {
            tools: [{ googleSearch: {} }], // Active l'ancrage avec la recherche Google
        };

        // G√©n√©ration de la r√©ponse via l'API Gemini
        console.log('ü§ñ G√©n√©ration de r√©ponse avec Gemini...');
        const result = await model.generateContent({
            contents: prompt,
            config: generationConfig, // Utilise la configuration avec l'outil de recherche
        });
        const response = await result.response;
        let text = (response && response.text) ? response.text().trim() : '';
        // ... (reste du code)
// Mise √† jour de l'historique des conversations priv√©es
        if (!isGroup) {
            userMemory.conversations.push({
                text: userText,
                timestamp: Date.now(),
                fromUser: true,
                hasImage: !!imageBuffer,
                imageAnalysis: imageAnalysis || null
            });
            userMemory.conversations.push({
                text: text,
                timestamp: Date.now(),
                fromBot: true,
                hasImage: !!lastBotImageAnalysis
            });

            // Limitation √† 100 messages maximum
            if (userMemory.conversations.length > 100) {
                userMemory.conversations = userMemory.conversations.slice(-100);
            }

            // Sauvegarder la m√©moire utilisateur
            await saveUserMemory(sender, userMemory);
        } else {
            // Sauvegarder la m√©moire du groupe
            await saveGroupMemory(remoteJid, groupMemory);
        }

        // Traitement des mentions dans les groupes
        if (isGroup && text && groupMemory?.participants) {
            const mentionRegex = /@(\d{5,})/g;
            let match;
            const participants = groupMemory.participants;

            // Recherche des mentions dans le texte de r√©ponse
            while ((match = mentionRegex.exec(text)) !== null) {
                const number = match[1];
                // Correspondance des num√©ros avec les JIDs des participants
                for (const [jid, info] of Object.entries(participants)) {
                    if (info.number === number) {
                        mentionJids.push(jid);
                        break;
                    }
                }
            }

            // √âlimination des doublons
            mentionJids = [...new Set(mentionJids)];

            // Nettoyage des mentions invalides
            text = text.replace(/@(\d{5,})/g, (full, num) => {
                const found = Object.values(participants).find(p => p.number === num);
                return found ? `@${num}` : num;
            });
        }

        return {
            text: text || "D√©sol√©, je n'ai pas pu g√©n√©rer de r√©ponse.",
            mentions: mentionJids,
            hasImage: !!imageBuffer,
            hasPreviousImage: !!lastBotImageAnalysis,
            contextInfo: {
                isGroup,
                groupName,
                userName,
                userNumber
            }
        };
    } catch (e) {
        console.error("[SupremIA] Erreur:", e?.stack || e);
        return {
            text: "*Je suis √©puis√©e, √©cris-moi plus tard.*",
            mentions: []
        };
    }
}

module.exports = { 
    nazunaReply, 
    resetConversationMemory,
    analyzeImageWithVision,
    getGroupName
};
