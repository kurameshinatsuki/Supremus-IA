const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

async function generateImage(prompt) {
    try {
        console.log('üé® G√©n√©ration image...');

        const model = genAI.getGenerativeModel({
            model: "gemini-2.0-flash-preview-image"
        });

        // Appel correct pour une g√©n√©ration d'image
        const result = await model.generateContent({
            contents: [{
                role: "user",
                parts: [{ text: prompt }]
            }],
            generationConfig: {
                responseMimeType: "image/png"
            }
        });

        // R√©cup√©ration du contenu image
        const imageData = result.response.candidates[0].content.parts[0].inlineData.data;
        const buffer = Buffer.from(imageData, "base64");

        return buffer;
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©ration image:', error);
        return null;
    }
}

async function execute(args, msg, sock) {
    try {
        const jid = msg.key.remoteJid;
        const prompt = args.join(" ");

        if (!prompt) {
            return `üé® *Cr√©ation IA :*\n\nPour g√©n√©rer une image :\n‚Ä¢ ‚úçÔ∏è Tapez "/imagine [description]"`;
        }

        const imageBuffer = await generateImage(prompt);

        if (!imageBuffer) {
            return "‚ùå D√©sol√©, je n'ai pas pu g√©n√©rer cette image.";
        }

        await sock.sendMessage(jid, {
            image: imageBuffer,
            caption: `üñºÔ∏è *IMAGE G√âN√âR√âE :*\n"${prompt}"`
        }, { quoted: msg });

    } catch (error) {
        console.error('‚ùå Erreur commande image:', error);
        return "‚ùå Une erreur est survenue pendant la g√©n√©ration.";
    }
}

module.exports = {
    name: 'imagine',
    description: 'G√©n√®re une image avec Makima Supremus',
    execute
};
