const { GoogleGenerativeAI } = require('@google/generative-ai');
const fs = require('fs');

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

// Mod√®le le plus r√©cent pour la g√©n√©ration d'images
const imageModel = genAI.getGenerativeModel({ model: "imagen-4.0-generate-001" });

async function generateImage(prompt) {
    try {
        console.log('üé® G√©n√©ration image...');
        const result = await imageModel.generateImage(prompt);

        // R√©cup√©rer l'image (format base64)
        const base64Image = result.images[0].imageData;
        const buffer = Buffer.from(base64Image, "base64");

        return buffer;
    } catch (error) {
        console.error('‚ùå Erreur g√©n√©ration image:', error);
        return null;
    }
}

async function execute(args, msg, sock) {
    try {
        const jid = msg.key.remoteJid;
        const prompt = args.join(" ");

        if (!prompt) {
            return `üé® *Cr√©ation IA :*\n\nPour g√©n√©rer une image :\n‚Ä¢ ‚úçÔ∏è Tapez "/image [description]"`;
        }

        // G√©n√©rer l'image
        const imageBuffer = await generateImage(prompt);

        if (!imageBuffer) {
            return "‚ùå D√©sol√©, je n'ai pas pu g√©n√©rer cette image.";
        }

        // Envoyer l'image g√©n√©r√©e
        await sock.sendMessage(jid, {
            image: imageBuffer,
            caption: `üñºÔ∏è *IMAGE G√âN√âR√âE :*\n\n"${prompt}"`
        }, { quoted: msg });

    } catch (error) {
        console.error('‚ùå Erreur commande image:', error);
        return "‚ùå Une erreur est survenue pendant la g√©n√©ration.";
    }
}

module.exports = {
    name: 'image',
    description: 'G√©n√®re une image avec Makima Supremus',
    execute
};